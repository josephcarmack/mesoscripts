"""
script that works with parstubuilder to decompress simulation vtk files
for a parametric study (assumes the data has already been compressed).
"""
import tarfile
import datetime as dt
import shutil
import os

# name of the parametric study who's data you wish to decompress
studyDir = '/absolute/path/to/parstubuilder/parametric/study/directory'

# -----------------------------------------------------------------
# get list of simulation directories from parStudyInfo.txt file 
# (generated by parstubuilder)
# -----------------------------------------------------------------

simList = []
with open(studyDir+'/parStudyInfo.txt') as fin:
    for line in fin:
        if 'Unique parameter set' in line:
            break
    for line in fin:
        simList.append(line.rstrip())
fin.close()

# -----------------------------------------------------------------
# use tar to decompress and unpack archive of each simulation's 
# vtk data
# -----------------------------------------------------------------

logName = 'decompressError.log'
print('\n\nBEGINNING DATA DECOMPRESSION FOR PARAMETRIC STUDY STORED IN:\n')
print(studyDir+'\n')
for pth in sorted(simList):

    # name of directory to where archive is stored
    dirName = studyDir+'/'+pth
    # name of archive file with full path
    arName = dirName+'/vtkoutput.tar.gz'
    try:
        with tarfile.open(arName, "r:gz") as tar:
            def is_within_directory(directory, target):
                
                abs_directory = os.path.abspath(directory)
                abs_target = os.path.abspath(target)
            
                prefix = os.path.commonprefix([abs_directory, abs_target])
                
                return prefix == abs_directory
            
            def safe_extract(tar, path=".", members=None, *, numeric_owner=False):
            
                for member in tar.getmembers():
                    member_path = os.path.join(path, member.name)
                    if not is_within_directory(path, member_path):
                        raise Exception("Attempted Path Traversal in Tar File")
            
                tar.extractall(path, members, numeric_owner=numeric_owner) 
                
            
            safe_extract(tar, dirName)
        print('- successfully decompressed and unpacked: '+arName)
        print()
        # remove the archive
        os.remove(arName)
    except Exception as tarError:
        # log errors
        fullLogName = studyDir+'/'+pth+'/'+logName
        print('\n- An exception was thrown while trying to decompress and unpack the following archive:\n')
        print('\t'+dirName+'\n')
        print('\t* writing error info on '+fullLogName)
        print('\t* removing failed data: '+arName)
        print()
        # write the log file
        with open(fullLogName,"w") as log:
            log.write(str(dt.datetime.now())+'\n')
            log.write('encountered exception of type: '+str(type(tarError))+'\n')
            log.write(str(tarError))
